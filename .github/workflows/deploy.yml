name: deploy-dev

on:
  push:
    branches: [ "main" ]
    paths:
      - "serverless.yml"
      - "serverless.yaml"
      - "handler.py"
      - ".github/workflows/deploy.yml"
      - "features_input.json"
  workflow_dispatch:
    inputs:
      stage:
        description: "Stage"
        required: false
        default: "dev"
      region:
        description: "AWS region"
        required: false
        default: "eu-west-3"

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

env:
  STAGE: ${{ github.event.inputs.stage || 'dev' }}
  AWS_REGION: ${{ github.event.inputs.region || 'eu-west-3' }}
  SERVICE_NAME: cancer-prediction-api
  SLS_TELEMETRY_DISABLED: "1"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            package-lock.json
            npm-shrinkwrap.json
            yarn.lock

      - name: Install Serverless CLI
        run: npm i -g serverless@^4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install jq
        run: |
          set -euo pipefail
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq >/dev/null
          jq --version

      - name: Show versions
        run: |
          node -v
          npm -v
          serverless -v

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate Serverless config
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        run: |
          set -euo pipefail
          serverless print --stage "$STAGE" --region "$AWS_REGION" >/dev/null
          echo "serverless.yml OK"

      - name: Deploy
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        run: |
          set -euo pipefail
          serverless deploy --stage "$STAGE" --region "$AWS_REGION" --conceal

      - name: Fetch API base URL (sls info)
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        run: |
          set -euo pipefail
          serverless info --stage "$STAGE" --region "$AWS_REGION" > sls-info.txt
          echo "=== sls-info.txt ==="
          cat sls-info.txt

      - name: Smoke test /health
        shell: bash
        run: |
          set -euo pipefail

          BASE_URL=$(tr -d '\r' < sls-info.txt | grep -Eo 'https://[^ ]+' | head -1)
          if [ -z "${BASE_URL:-}" ]; then
            echo "❌ Impossible de déterminer la base URL depuis sls-info.txt"
            cat sls-info.txt || true
            exit 1
          fi

          HEALTH_URL="${BASE_URL%/}/health"
          echo "Health URL: $HEALTH_URL"

          ok=false
          for i in {1..5}; do
            echo "Essai #$i"
            code=$(curl -sS -m 10 -o /tmp/body.txt -w "%{http_code}" "$HEALTH_URL" || true)

            echo "::group::Réponse HTTP (essai $i)"
            echo "HTTP: ${code}"
            echo "Corps brut reçu:"
            sed -e 's/^/| /' /tmp/body.txt || true
            echo "::endgroup::"

            if [ "$code" = "200" ]; then
              # Si ton /health renvoie du JSON, on peut valider .ok==true :
              if jq -e '.ok == true' /tmp/body.txt >/dev/null 2>&1; then
                echo "Health OK ✅"
                ok=true
                break
              fi
              # Sinon, considère 200 comme suffisant :
              echo "Health OK (HTTP 200) ✅"
              ok=true
              break
            fi
            sleep $((i*3))
          done

          if [ "$ok" != "true" ]; then
            echo "❌ Health check failed"
            echo "::group::Derniers logs CloudWatch de la fonction health"
            serverless logs -f health -s "$STAGE" -r "$AWS_REGION" --startTime 10m || true
            echo "::endgroup::"
            exit 1
          fi

      - name: Smoke test /predict (optional)
        if: hashFiles('features_input.json') != ''
        shell: bash
        run: |
          set -euo pipefail
          PRED=$(grep -Eo 'POST - https://[^ ]+/predict' sls-info.txt | awk '{print $3}' | head -n1)
          echo "Predict URL: ${PRED:-<none>}"
          if [ -z "${PRED:-}" ]; then
            echo "No /predict endpoint in sls info. Skipping."
            exit 0
          fi
          RES=$(curl -fsS -H "Content-Type: application/json" -d @features_input.json "$PRED")
          echo "$RES" | tee predict-response.json
          jq -e '.predictions or .probabilities or .prediction or .result' predict-response.json >/dev/null

      - name: Upload sls info
        uses: actions/upload-artifact@v4
        with:
          name: sls-info
          path: |
            sls-info.txt
            predict-response.json
          if-no-files-found: ignore
          retention-days: 7

      - name: Job summary
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "## Deploy summary"
            echo "- **Service**: ${SERVICE_NAME}"
            echo "- **Stage**: ${STAGE}"
            echo "- **Region**: ${AWS_REGION}"
            HEALTH=$(grep -Eo 'GET - https://[^ ]+/health' sls-info.txt | awk '{print $3}' | head -n1 || true)
            PRED=$(grep -Eo 'POST - https://[^ ]+/predict' sls-info.txt | awk '{print $3}' | head -n1 || true)
            echo "- **Health**: ${HEALTH:-n/a}"
            echo "- **Predict**: ${PRED:-n/a}"
          } >> "$GITHUB_STEP_SUMMARY"
