name: deploy-dev

on:
  push:
    branches: [ "main" ]
    paths:
      - "serverless.yml"
      - "serverless.yaml"
      - "handler.py"
      - "features_input.json"
      - "form_validated.html"
      - "result.html"
      - "index.html"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:
    inputs:
      stage:
        description: "Stage"
        required: false
        default: "dev"
      region:
        description: "AWS region"
        required: false
        default: "eu-west-3"

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

env:
  STAGE: ${{ github.event.inputs.stage || 'dev' }}
  AWS_REGION: ${{ github.event.inputs.region || 'eu-west-3' }}
  SERVICE_NAME: cancer-prediction-api
  SLS_TELEMETRY_DISABLED: "1"
  # (optionnel) URL complète de l'API d'inférence côté frontend (pour S3)
  FRONTEND_API_URL: ${{ secrets.FRONTEND_API_URL }} # ex: https://api.mlopstheotiste.fr/predict

jobs:
  # ===================== BACKEND (Serverless) =====================
  deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Serverless CLI
        run: npm i -g serverless@^4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install jq
        run: |
          set -euo pipefail
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq >/dev/null
          jq --version

      - name: Show versions
        run: |
          node -v
          npm -v
          serverless -v

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate Serverless config
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        run: |
          set -euo pipefail
          serverless print --stage "$STAGE" --region "$AWS_REGION" >/dev/null
          echo "serverless.* OK"

      - name: Deploy
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        run: |
          set -euo pipefail
          serverless deploy --stage "$STAGE" --region "$AWS_REGION" --conceal

      - name: Fetch API base URL (sls info)
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        run: |
          set -euo pipefail
          serverless info --stage "$STAGE" --region "$AWS_REGION" > sls-info.txt || true
          echo "=== sls-info.txt ==="
          cat sls-info.txt || true

      - name: Resolve endpoints (health & predict)
        id: resolve
        shell: bash
        env:
          HEALTH_URL_SECRET: ${{ secrets.HEALTH_URL }} # ex: https://api.mlopstheotiste.fr/health (optionnel)
        run: |
          set -euo pipefail
          BASE_URL=""
          HEALTH_URL=""

          # 1) Secret direct (si fourni)
          if [ -n "${HEALTH_URL_SECRET:-}" ]; then
            HEALTH_URL="$HEALTH_URL_SECRET"
            BASE_URL="${HEALTH_URL%/health}"
          fi

          # 2) sls-info: URL /health
          if [ -z "${HEALTH_URL}" ]; then
            url=$(grep -Eo 'https://[^ ]+/health' sls-info.txt | head -1 || true)
            if [ -n "${url}" ]; then
              HEALTH_URL="$url"
              BASE_URL="${HEALTH_URL%/health}"
            fi
          fi

          # 3) sls-info: première URL générique
          if [ -z "${BASE_URL}" ]; then
            base=$(grep -Eo 'https://[^ ]+' sls-info.txt | head -1 || true)
            if [ -n "${base}" ]; then
              BASE_URL="${base%/}"
            fi
          fi

          # 4) CloudFormation Outputs (ServiceEndpoint / HttpApiUrl)
          if [ -z "${BASE_URL}" ]; then
            STACK="${SERVICE_NAME}-${STAGE}"
            outs=$(aws cloudformation describe-stacks \
              --stack-name "$STACK" --region "$AWS_REGION" \
              --query "Stacks[0].Outputs[].OutputValue" --output text 2>/dev/null || true)
            if [ -n "${outs}" ]; then
              BASE_URL=$(printf "%s\n" $outs | grep -E 'https://.*execute-api\..*amazonaws.com' | head -1 || true)
              BASE_URL="${BASE_URL%/}"
            fi
          fi

          # 5) Compose HEALTH_URL si besoin
          if [ -z "${HEALTH_URL}" ] && [ -n "${BASE_URL}" ]; then
            case "$BASE_URL" in
              */health) HEALTH_URL="$BASE_URL" ;;
              *)        HEALTH_URL="${BASE_URL}/health" ;;
            esac
          fi

          if [ -z "${HEALTH_URL}" ] || [ -z "${BASE_URL}" ]; then
            echo "❌ Aucune URL d'API trouvée. Définis le secret HEALTH_URL (ex: https://ton-api/health) ou expose ServiceEndpoint dans les Outputs CFN."
            exit 1
          fi

          echo "BASE_URL_RESOLVED=$BASE_URL"      | tee -a "$GITHUB_ENV"
          echo "HEALTH_URL_RESOLVED=$HEALTH_URL" | tee -a "$GITHUB_ENV"
          echo "Resolved BASE_URL=$BASE_URL"
          echo "Resolved HEALTH_URL=$HEALTH_URL"

      - name: Smoke test /health
        shell: bash
        run: |
          set -euo pipefail
          HEALTH_URL="${HEALTH_URL_RESOLVED:?missing}"
          ok=false
          for i in {1..6}; do
            code=$(curl -sS -m 12 -o /tmp/body.txt -w "%{http_code}" "$HEALTH_URL" || true)
            echo "::group::Attempt $i - HTTP ${code}"
            sed -e 's/^/| /' /tmp/body.txt || true
            echo "::endgroup::"
            if [ "$code" = "200" ] || [ "$code" = "204" ]; then ok=true; break; fi
            sleep $((i*5))
          done
          [ "$ok" = "true" ] || { echo "❌ Healthcheck failed on $HEALTH_URL"; exit 1; }

      - name: Smoke test /predict (optional)
        if: ${{ hashFiles('features_input.json') != '' }}
        shell: bash
        run: |
          set -euo pipefail
          PRED="${BASE_URL_RESOLVED%/}/predict"
          echo "Predict URL: ${PRED}"
          RES=$(curl -fsS -H "Content-Type: application/json" -d @features_input.json "$PRED")
          echo "$RES" | tee predict-response.json
          jq -e '.predictions or .probabilities or .prediction or .result' predict-response.json >/dev/null

      - name: Upload sls info
        uses: actions/upload-artifact@v4
        with:
          name: sls-info
          path: |
            sls-info.txt
            predict-response.json
          if-no-files-found: ignore
          retention-days: 7

  # ===================== FRONTEND (S3 + CloudFront) =====================
  frontend-s3:
    if: ${{ secrets.S3_BUCKET != '' }}
    runs-on: ubuntu-latest
    needs: [deploy-backend]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build static bundle (dist/)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          # injection optionnelle de l'API_URL (si FRONTEND_API_URL est défini)
          API="${FRONTEND_API_URL:-}"
          if [ -n "$API" ]; then
            sed "s|https://api.mlopstheotiste.fr/predict|$API|g" form_validated.html > dist/form_validated.html || cp form_validated.html dist/form_validated.html
          else
            cp form_validated.html dist/form_validated.html
          fi
          cp result.html dist/result.html
          if [ -f index.html ]; then cp index.html dist/index.html; else
            echo '<meta http-equiv="refresh" content="0; url=/form_validated.html">' > dist/index.html
          fi

      - name: Upload to S3 (public/)
        shell: bash
        run: |
          set -euo pipefail
          BUCKET="${{ secrets.S3_BUCKET }}"
          aws s3 cp dist/ "s3://${BUCKET}/public/" --recursive --cache-control "no-cache, no-store, must-revalidate"
          # Fixer Content-Type (HTML)
          for f in form_validated.html result.html index.html; do
            aws s3 cp "dist/$f" "s3://${BUCKET}/public/$f" \
              --cache-control "no-cache, no-store, must-revalidate" --content-type "text/html"
          done

      - name: Invalidate CloudFront (if set)
        if: ${{ secrets.CF_DISTRIBUTION_ID != '' }}
        shell: bash
        run: |
          set -euo pipefail
          aws cloudfront create-invalidation \
            --distribution-id "${{ secrets.CF_DISTRIBUTION_ID }}" \
            --paths "/form_validated.html" "/result.html" "/index.html" "/"

  # ===================== FRONTEND (Amplify CI/CD) =====================
  frontend-amplify:
    if: ${{ secrets.AMPLIFY_APP_ID != '' && secrets.AMPLIFY_BRANCH_NAME != '' }}
    runs-on: ubuntu-latest
    needs: [deploy-backend]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Trigger Amplify build & wait
        shell: bash
        env:
          APP_ID: ${{ secrets.AMPLIFY_APP_ID }}
          BRANCH: ${{ secrets.AMPLIFY_BRANCH_NAME }}
        run: |
          set -euo pipefail
          echo "Trigger Amplify job on app=$APP_ID branch=$BRANCH"
          aws amplify start-job --app-id "$APP_ID" --branch-name "$BRANCH" --job-type RELEASE >/dev/null

          # attendre la fin
          for i in {1..40}; do
            status=$(aws amplify list-jobs --app-id "$APP_ID" --branch-name "$BRANCH" \
              --query 'jobSummaries[0].status' --output text 2>/dev/null || echo "UNKNOWN")
            echo "Amplify status: $status"
            case "$status" in
              SUCCEED) break ;;
              FAILED|CANCELLED) echo "❌ Amplify job $status"; exit 1 ;;
              *) sleep 10 ;;
            esac
          done

          domain=$(aws amplify get-app --app-id "$APP_ID" --query 'app.defaultDomain' --output text)
          echo "AMPLIFY_URL=https://${BRANCH}.${domain}" | tee -a "$GITHUB_ENV"
          echo "Amplify URL: https://${BRANCH}.${domain}"

  # ===================== SUMMARY =====================
  summary:
    runs-on: ubuntu-latest
    needs: [deploy-backend, frontend-s3, frontend-amplify]
    if: always()
    steps:
      - name: Summary
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "## Deploy summary"
            echo "- **Service**: ${SERVICE_NAME}"
            echo "- **Stage**: ${STAGE}"
            echo "- **Region**: ${AWS_REGION}"
            echo "- **BASE URL**: ${BASE_URL_RESOLVED:-n/a}"
            echo "- **Health**: ${HEALTH_URL_RESOLVED:-n/a}"
            echo "- **Frontend S3 bucket**: ${{ secrets.S3_BUCKET || 'n/a' }}"
            echo "- **CloudFront**: ${{ secrets.CF_DISTRIBUTION_ID || 'n/a' }}"
            echo "- **Amplify app**: ${{ secrets.AMPLIFY_APP_ID || 'n/a' }} (branch: ${{ secrets.AMPLIFY_BRANCH_NAME || 'n/a' }})"
            [ -n "${AMPLIFY_URL:-}" ] && echo "- **Amplify URL**: ${AMPLIFY_URL}" || true
          } >> "$GITHUB_STEP_SUMMARY"
