name: deploy-dev

on:
  push:
    branches: [ "main" ]
    paths:
      - "handler.py"
      - "serverless.yaml"
      - ".github/workflows/deploy-dev.yml"
      - "model-layer.zip"
      - "RandomForest.pkl"
      - "requirements.txt"
      - "features_input.json"
  workflow_dispatch:

concurrency:
  group: deploy-dev
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      STAGE: dev
      AWS_REGION: eu-west-3
      # Nom du stack CFN attendu (service + - + stage) — ajuste si besoin :
      STACK_NAME: cancer-prediction-api-dev
      # Auth Serverless v4 (depuis GitHub Secrets)
      SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (for Serverless CLI)
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          # pas de cache => évite l’erreur “Dependencies lock file is not found”
          # cache: 'npm'

      - name: Install Serverless CLI v4
        run: npm i -g serverless@4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Validate Serverless config
        run: |
          serverless -v
          serverless print --stage "$STAGE" --region "$AWS_REGION" > /dev/null

      - name: Deploy (dev)
        run: |
          serverless deploy --stage "$STAGE" --region "$AWS_REGION"

      - name: Fetch API base URL from CloudFormation (best effort)
        id: fetch_base
        run: |
          set -e
          # 1) Essai via CloudFormation Output "ServiceEndpoint"
          BASE="$(aws cloudformation describe-stacks \
            --region "$AWS_REGION" --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs[?OutputKey=='ServiceEndpoint'].OutputValue" \
            --output text 2>/dev/null || true)"
          echo "CFN_BASE=$BASE"

          # 2) Fallback via 'serverless info --verbose'
          serverless info --stage "$STAGE" --region "$AWS_REGION" --verbose | tee sls-info.txt
          if [[ -z "$BASE" || "$BASE" == "None" ]]; then
            BASE="$(grep -Eo 'https://[a-zA-Z0-9.-]+\.execute-api\.[a-z0-9-]+\.amazonaws\.com(/[a-zA-Z0-9._-]+)?' sls-info.txt | head -n1 || true)"
          fi

          if [[ -z "$BASE" ]]; then
            echo "Impossible de récupérer l’URL de base." >&2
            exit 1
          fi

          echo "BASE_URL=$BASE" | tee -a "$GITHUB_ENV"
          echo "HEALTH_URL=$BASE/health" | tee -a "$GITHUB_ENV"

      - name: Smoke test /health
        run: |
          set -e
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y -qq curl jq >/dev/null
          echo "Health URL: $HEALTH_URL"

          HTTP_CODE=$(curl -sS -o /tmp/health.json -w "%{http_code}" "$HEALTH_URL" || true)
          echo "HTTP: $HTTP_CODE"
          cat /tmp/health.json || true

          # 200 attendu + champ ok == true
          test "$HTTP_CODE" -eq 200
          jq -e '.ok == true' /tmp/health.json

      # (optionnel) Smoke test /predict si un exemple est présent
      - name: Smoke test /predict (optional)
        if: hashFiles('features_input.json') != ''
        run: |
          set -e
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y -qq curl jq >/dev/null
          PRED_URL="${BASE_URL%/}/predict"
          echo "Predict URL: $PRED_URL"

          curl -sS -X POST "$PRED_URL" \
            -H "Content-Type: application/json" \
            -d @features_input.json \
            -o /tmp/predict.json

          cat /tmp/predict.json
          jq -e '.predictions | length > 0' /tmp/predict.json

      - name: Show endpoints (optional) and save
        run: |
          echo "==== Serverless info (kept as artifact) ===="
          cat sls-info.txt || true

          {
            echo "### Deploy summary"
            echo ""
            echo "- **Stage**: \`$STAGE\`"
            echo "- **Region**: \`$AWS_REGION\`"
            echo "- **Health**: \`$HEALTH_URL\`"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload sls info (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: sls-info
          path: sls-info.txt
          if-no-files-found: warn
