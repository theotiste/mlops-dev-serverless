name: deploy-dev

on:
  push:
    branches: [ "main" ]
    paths:
      - "serverless.yaml"
      - "handler.py"
      - "model-layer.zip"
      - ".github/workflows/**"
  workflow_dispatch:

env:
  AWS_REGION: eu-west-3

concurrency:
  group: sls-dev-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Serverless CLI
        run: npm i -g serverless@4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate Serverless config
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        run: serverless print --stage dev --region $AWS_REGION

      - name: Deploy (dev)
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        run: serverless deploy --stage dev --region $AWS_REGION --conceal

      - name: Show endpoints (and save)
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        run: |
          serverless info --stage dev--region $AWS_REGION | tee sls-info.txt
          echo "-----"
          cat sls-info.txt
          
      - name: Smoke test /health
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y >/dev/null && sudo apt-get install -y jq >/dev/null

          echo "---- serverless info (extrait) ----"
          sed -n '1,200p' sls-info.txt || true
          echo "-----------------------------------"

          # 1) Essayer d'extraire une URL qui se termine par /health
          URL=$(awk '/health/ {for(i=1;i<=NF;i++){ if ($i ~ /^https?:\/\//) {print $i; exit} }}' sls-info.txt || true)

          # 2) Fallback : prendre la base et ajouter /health
          if [ -z "${URL:-}" ]; then
            BASE=$(grep -Eo 'https?://[^ ]*execute-api[^ ]*amazonaws\.com[^ ]*' sls-info.txt | head -n1 || true)
            if [ -n "${BASE:-}" ]; then URL="${BASE%/}/health"; fi
          fi

          echo "Health URL: ${URL:-<vide>}"
          test -n "${URL:-}" || { echo "::error::Impossible de trouver l’URL /health dans sls-info.txt"; exit 2; }

          # Petit retry le temps que la Lambda se ‘réveille’
          for i in {1..10}; do
            code=$(curl -s -o resp.json -w "%{http_code}" "$URL" || echo 000)
            echo "HTTP $code"; cat resp.json || true; echo
            if [ "$code" = "200" ] && jq -e '.ok == true' resp.json >/dev/null 2>&1; then
              exit 0
            fi
            sleep 4
          done

          echo "::error::Smoke test /health FAILED"
          exit 1

      - name: Smoke test /predict
        run: |
          URL=$(grep -Eo 'POST - https://[^ ]+/predict' sls-info.txt | awk '{print $3}' | head -n1)
          echo "Predict URL: $URL"

          # Payload d'exemple (30 features, même ordre que ton EXPECTED_FEATURES)
          cat > payload.json << 'JSON'
          {
            "features": [
              17.99,10.38,122.8,1001.0,0.1184,0.2776,0.3001,0.1471,0.2419,0.07871,
              1.095,0.9053,8.589,153.4,0.006399,0.04904,0.05373,0.01587,0.03003,0.006193,
              25.38,17.33,184.6,2019.0,0.1622,0.6656,0.7119,0.2654,0.4601,0.1189
            ]
          }
          JSON

          # retry (au cas où la warmup prenne un peu de temps)
          for i in {1..10}; do
            CODE=$(curl -sS -o resp.json -w "%{http_code}" -H "Content-Type: application/json" -d @payload.json "$URL" || echo 000)
            echo "HTTP $CODE"
            cat resp.json || true
            echo
            if [ "$CODE" = "200" ] && jq -e '.predictions and .probabilities' resp.json >/dev/null 2>&1; then
              exit 0
            fi
            sleep 4
          done
          echo "Smoke test /predict FAILED"
          exit 1

      - name: Upload sls info (artifact)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sls-info
          path: sls-info.txt
