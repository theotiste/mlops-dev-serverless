name: deploy-dev

on:
  push:
    branches: [ main ]
    paths-ignore:
      - "**/*.md"
      - ".gitignore"
      - "docs/**"
  workflow_dispatch:

concurrency:
  group: deploy-dev
  cancel-in-progress: true

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    env:
      STAGE: dev
      AWS_REGION: eu-west-3
      SERVICE_NAME: cancer-prediction-api

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Serverless CLI
        run: |
          npm i -g serverless@^4
          sls --version

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Show versions
        run: |
          node -v
          npm -v
          python -V
          pip -V
          aws --version
          sls --version

      - name: Configure AWS credentials (dev)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Validate Serverless config
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        run: |
          serverless print --stage "$STAGE" --region "$AWS_REGION" >/dev/null

      - name: Deploy (dev)
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        run: |
          serverless deploy --stage "$STAGE" --region "$AWS_REGION" --verbose

      - name: Fetch API base URL from CloudFormation
        id: fetch_url
        run: |
          STACK_NAME="${SERVICE_NAME}-${STAGE}"
          BASE_URL=$(aws cloudformation describe-stacks \
            --stack-name "$STACK_NAME" \
            --query "Stacks[0].Outputs[?OutputKey=='HttpApiUrl'||OutputKey=='ServiceEndpoint'].OutputValue" \
            --output text)
          if [ -z "$BASE_URL" ] || [ "$BASE_URL" = "None" ]; then
            echo "Base URL introuvable dans les Outputs CFN" >&2
            exit 1
          fi
          echo "BASE_URL=$BASE_URL" | tee -a $GITHUB_ENV
          printf "health_url=%s/health\npredict_url=%s/predict\n" "$BASE_URL" "$BASE_URL" > sls-info.txt

      - name: Smoke test /health
        run: |
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq curl >/dev/null
          echo "Health URL: ${BASE_URL}/health"
          if ! curl -fsS "${BASE_URL}/health" | jq -e '.ok == true' >/dev/null; then
            echo "Health check FAILED"
            curl -iS "${BASE_URL}/health" || true
            exit 1
          fi
          echo "Health check OK"

      - name: Smoke test /predict
        run: |
          # outils
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq curl >/dev/null

          PRED_URL="${BASE_URL%/}/predict"
          echo "Predict URL: $PRED_URL"

          # payload d'exemple : 30 features dans l'ordre attendu
          read -r -d '' PAYLOAD <<'JSON'
          {
            "features": [
              17.99,10.38,122.8,1001.0,0.1184,0.2776,0.3001,0.1471,0.2419,0.07871,
              1.095,0.9053,8.589,153.4,0.006399,0.04904,0.05373,0.01587,0.003003,0.006193,
              25.38,17.33,184.6,2019.0,0.1622,0.6656,0.7119,0.2654,0.4601,0.1189
            ]
          }
          JSON

          echo "Payload:"
          echo "$PAYLOAD" | jq .

          # Appel: capture statut HTTP + corps sans échouer la commande
          HTTP_CODE=$(curl -sS -o /tmp/predict.json -w "%{http_code}" \
            -X POST "$PRED_URL" -H "Content-Type: application/json" \
            --data "$PAYLOAD")

          echo "HTTP: $HTTP_CODE"
          echo "Body:"
          cat /tmp/predict.json | sed -e 's/^/  /'

          # Si non-200, on échoue en laissant les logs ci-dessus
          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "Predict smoke test FAILED (HTTP $HTTP_CODE)"
            exit 1
          fi

          # Validation minimale de la forme de réponse
          jq -e '
            (.predictions|type=="array") and
            (.probabilities|type=="array") and
            ((.predictions|length)==1) and
            ((.probabilities|length)==1)
          ' /tmp/predict.json >/dev/null

          echo "Predict smoke test OK ✅"
     
      - name: Show endpoints (optional) and save
        run: |
          echo "BASE_URL=${BASE_URL}"
          cat sls-info.txt

      - name: Upload sls info (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: sls-info
          path: sls-info.txt
          if-no-files-found: warn
