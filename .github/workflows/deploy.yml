name: deploy-dev

on:
  push:
    branches: [ main ]
    paths:
      - "handler.py"
      - "serverless.yaml"
      - ".github/workflows/deploy.yml"
      - "RandomForest.pkl"
      - "model-layer.zip"
  workflow_dispatch:
    inputs:
      stage:
        description: "Serverless stage"
        type: string
        default: dev
      region:
        description: "AWS region"
        type: string
        default: eu-west-3
      run_smoke:
        description: "Run smoke tests"
        type: boolean
        default: true
      rollback_timestamp:
        description: "Rollback to this Serverless timestamp (leave empty to deploy)"
        type: string
        required: false
        default: ""

env:
  STAGE: ${{ inputs.stage || 'dev' }}
  AWS_REGION: ${{ inputs.region || 'eu-west-3' }}
  STACK_NAME: cancer-prediction-api-${{ inputs.stage || 'dev' }}

concurrency:
  group: serverless-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ---------- Rollback manuel ----------
  rollback:
    if: ${{ inputs.rollback_timestamp != '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Serverless CLI
        run: npm i -g serverless@4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Serverless rollback
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        run: |
          serverless rollback \
            --stage "${{ env.STAGE }}" \
            --region "${{ env.AWS_REGION }}" \
            --timestamp "${{ inputs.rollback_timestamp }}"
          echo "Rolled back to timestamp: ${{ inputs.rollback_timestamp }}" >> $GITHUB_STEP_SUMMARY

  # ---------- DÃ©ploiement normal ----------
  deploy:
    if: ${{ inputs.rollback_timestamp == '' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Serverless CLI
        run: npm i -g serverless@4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Show versions
        run: |
          node -v
          serverless --version
          python -V

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate Serverless config
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        run: serverless print --stage "${{ env.STAGE }}" --region "${{ env.AWS_REGION }}"

      - name: Deploy (${{ env.STAGE }})
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        run: |
          serverless deploy --stage "${{ env.STAGE }}" --region "${{ env.AWS_REGION }}" --conceal
          serverless info   --stage "${{ env.STAGE }}" --region "${{ env.AWS_REGION }}" > sls-info.txt

      - name: Fetch API base URL from sls info
        id: api
        run: |
          # Tente plusieurs formats d'output pour Ãªtre robuste
          BASE=$(grep -Eo 'https://[^ ]+\.amazonaws\.com' sls-info.txt | head -n1 || true)
          [[ -z "$BASE" ]] && BASE=$(grep -Eo 'ServiceEndpoint:\s+https://[^ ]+' sls-info.txt | awk '{print $2}' | head -n1 || true)
          echo "base=$BASE" >> "$GITHUB_OUTPUT"
          echo "### API base URL" >> $GITHUB_STEP_SUMMARY
          echo "$BASE" >> $GITHUB_STEP_SUMMARY
          echo "$BASE" > api-base.txt

      - name: Upload sls info (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: sls-info
          path: |
            sls-info.txt
            api-base.txt

      - name: Smoke test /health
        if: ${{ inputs.run_smoke }}
        run: |
          set -euo pipefail
          URL="${{ steps.api.outputs.base }}/health"
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq >/dev/null
          echo "Health URL: $URL"
          test -n "$URL"
          curl -sS "$URL" | jq -e '.ok == true' >/dev/null

      - name: Smoke test /predict
        if: ${{ inputs.run_smoke }}
        run: |
          set -euo pipefail
          BASE="${{ steps.api.outputs.base }}"
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq >/dev/null

          if [ -f "features_input.json" ]; then
            BODY=$(cat features_input.json)
          else
            # Exemple minimal (31 valeurs) correspondant Ã  ton modÃ¨le
            BODY='{"features":[17.99,10.38,122.8,1001.0,0.1184,0.2776,0.3001,0.1471,0.2419,0.07871,1.095,0.9053,8.589,153.4,0.006399,0.04904,0.05373,0.01587,0.03003,0.006193,25.38,17.33,184.6,2019,0.1622,0.6656,0.7119,0.2654,0.4601,0.1189]}'
          fi

          echo "$BODY" | jq . >/dev/null  # valide le JSON
          curl -sS -X POST "$BASE/predict" \
            -H "Content-Type: application/json" \
            -d "$BODY" | jq -e '.predictions | length >= 1' >/dev/null

      - name: Summary
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸš€ DÃ©ployÃ©: **${{ env.STAGE }}** @ **${{ env.AWS_REGION }}**" >> $GITHUB_STEP_SUMMARY
          echo "Base URL: ${{ steps.api.outputs.base }}" >> $GITHUB_STEP_SUMMARY
