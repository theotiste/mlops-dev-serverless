name: deploy-dev

on:
  push:
    branches: [ main ]
    paths:
      - "serverless.yaml"
      - "handler.py"
      - ".github/workflows/deploy.yml"
      - "features_input.json"
  workflow_dispatch:
    inputs:
      stage:
        description: "Stage"
        default: "dev"
      region:
        description: "AWS region"
        default: "eu-west-3"

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

env:
  STAGE: ${{ github.event.inputs.stage || 'dev' }}
  AWS_REGION: ${{ github.event.inputs.region || 'eu-west-3' }}
  SERVICE_NAME: cancer-prediction-api
  SLS_TELEMETRY_DISABLED: "1"

jobs:
  deploy-dev:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Node (cache npm si lock file)
      - name: Setup Node (cache npm)
        if: hashFiles('package-lock.json','npm-shrinkwrap.json','yarn.lock') != ''
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            package-lock.json
            npm-shrinkwrap.json
            yarn.lock

      - name: Setup Node (no cache)
        if: hashFiles('package-lock.json','npm-shrinkwrap.json','yarn.lock') == ''
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Serverless CLI
        run: npm i -g serverless@^4

      # Python + jq
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install jq
        run: |
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq >/dev/null
          jq --version

      - name: Show versions
        run: |
          node -v
          npm -v
          serverless -v

      # AWS creds
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Validation
      - name: Validate Serverless config
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        run: |
          set -euo pipefail
          serverless print --stage "$STAGE" --region "$AWS_REGION" >/dev/null
          echo "serverless.yaml OK"

      # Déploiement
      - name: Deploy
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        run: |
          serverless deploy --stage "$STAGE" --region "$AWS_REGION" --conceal

      # Récupère les endpoints
      - name: Fetch API base URL (sls info)
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        run: |
          serverless info --stage "$STAGE" --region "$AWS_REGION" > sls-info.txt
          echo "=== sls-info.txt ==="
          cat sls-info.txt

      # Smoke /health
      - name: Smoke test /health
        shell: bash
        run: |
          set -euo pipefail
          URL=$(grep -Eo 'GET - https://[^ ]+/health' sls-info.txt | awk '{print $3}' | head -n1)
          echo "Health URL: $URL"
          test -n "$URL"

          for i in {1..5}; do
            echo "Try ${i}/5 ..."
            if curl -fsS "$URL" | jq -e '.ok == true' >/dev/null; then
              echo "Health OK ✅"
              exit 0
            fi
            sleep $((i*3))
          done
          echo "Health check failed ❌"; exit 1

      # Smoke /predict (optionnel)
      - name: Smoke test /predict (optional)
        if: hashFiles('features_input.json') != ''
        shell: bash
        run: |
          set -euo pipefail
          PRED=$(grep -Eo 'POST - https://[^ ]+/predict' sls-info.txt | awk '{print $3}' | head -n1)
          echo "Predict URL: ${PRED:-<none>}"
          if [[ -z "${PRED:-}" ]]; then
            echo "No /predict endpoint in sls info. Skipping."
            exit 0
          fi
          RES=$(curl -fsS -H "Content-Type: application/json" -d @features_input.json "$PRED")
          echo "$RES" | tee predict-response.json
          jq -e '.predictions or .probabilities' predict-response.json >/dev/null

      # Artefacts + résumé
      - name: Upload sls info
        uses: actions/upload-artifact@v4
        with:
          name: sls-info
          path: |
            sls-info.txt
            predict-response.json
          if-no-files-found: ignore
          retention-days: 7

      - name: Job summary
        shell: bash
        run: |
          echo "## Deploy summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: ${SERVICE_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "- **Stage**: ${STAGE}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${AWS_REGION}" >> $GITHUB_STEP_SUMMARY
          HEALTH=$(grep -Eo 'GET - https://[^ ]+/health' sls-info.txt | awk '{print $3}' | head -n1 || true)
          PRED=$(grep -Eo 'POST - https://[^ ]+/predict' sls-info.txt | awk '{print $3}' | head -n1 || true)
          echo "- **Health**: ${HEALTH:-n/a}" >> $GITHUB_STEP_SUMMARY
          echo "- **Predict**: ${PRED:-n/a}"   >> $GITHUB_STEP_SUMMARY
