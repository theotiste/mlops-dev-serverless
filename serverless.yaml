service: cancer-prediction-api
frameworkVersion: "4"


provider:
  name: aws
  runtime: python3.12
  region: eu-west-3
  memorySize: 1024
  timeout: 15
  versionFunctions: true

  # Observabilité
  logRetentionInDays: 30
  tracing:
    lambda: true
    apiGateway: true
  logs:
    httpApi: true                       # logs d’accès API Gateway (HTTP API v2)

  httpApi:
    cors:
      allowedOrigins: ["*"]
      allowedHeaders: ["Content-Type"]
      allowedMethods: ["GET", "POST", "OPTIONS"]

  environment:
    S3_BUCKET: mlopstheotiste-bucket       # <-- adapte si besoin
    MODEL_KEY: models/RandomForest.pkl     # <-- adapte si besoin

  iam:
    role:
      statements:
        # Lecture du modèle depuis S3
        - Effect: Allow
          Action: s3:GetObject
          Resource:
            - arn:aws:s3:::${self:provider.environment.S3_BUCKET}/${self:provider.environment.MODEL_KEY}
            - arn:aws:s3:::${self:provider.environment.S3_BUCKET}/models/*

        # (facultatif) X-Ray pour traces détaillées
        - Effect: Allow
          Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
          Resource: "*"

package:
  patterns:
    - "!**"              # exclure tout…
    - handler.py         # …sauf le code Lambda

functions:
  health:
    handler: handler.health
    events:
      - httpApi:
          path: /health
          method: GET

  predict:
    handler: handler.predict
    timeout: 15
    layers:
      # ARNs des layers (numpy + scikit-learn) – adapte si besoin
      - arn:aws:lambda:eu-west-3:571600829584:layer:numpy-layer:2
      - arn:aws:lambda:eu-west-3:571600829584:layer:sklearn-layer:11
    events:
      - httpApi:
          path: /predict
          method: POST

custom:
  # Tagging utile pour la visibilité des ressources
  stage: ${opt:stage, 'dev'}
  stackTags:
    Service: ${self:service}
    Stage: ${self:custom.stage}

  # =========================
  # Alarms (serverless-plugin-aws-alerts)
  # =========================
  alerts:
    stages: [dev, prod]
    topics:
      alarm:
        topic: ${self:service}-${sls:stage}-alarms
        notifications:
          # Remplace par ton email, Slack/SNS… (l’email devra être confirmé)
          - protocol: email
            endpoint: franck.theotiste@wanadoo.fr
    alarms:
      # Lambda
      - functionErrors
      - functionThrottles
      - functionDuration
      # API Gateway
      - apiGateway5xxError
      - apiGatewayLatency
