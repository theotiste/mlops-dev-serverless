service: cancer-prediction-api
frameworkVersion: ">=4.0.0"

provider:
  name: aws
  runtime: python3.12
  region: ${opt:region, 'eu-west-3'}
  stage: ${opt:stage, 'dev'}
  architecture: x86_64               # arm64 possible si tes libs natives supportent
  logRetentionInDays: 14             # rétention des logs Lambda
  tracing:
    lambda: true
  environment:
    STAGE: ${self:provider.stage}
    LOG_LEVEL: INFO
  apiGateway:                         # REST API (pas HTTP API)
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
    metrics: false                    # évite la création d’un rôle/log group API Gateway
  tags:
    project: cancer-prediction
    stack: ${self:service}-${self:provider.stage}
  stackTags:
    project: cancer-prediction
    stage: ${self:provider.stage}

package:
  individually: true
  patterns:                           # inclusions/exclusions prudentes
    - "!**/.git/**"
    - "!**/.venv/**"
    - "!**/venv/**"
    - "!**/node_modules/**"
    - "!**/.serverless/**"
    - "!train-venv/**"
    - "!slim-venv/**"
    - "!**/*.ipynb"
    - "!**/*.csv"
    - "!**/*.md"
    - "!**/*.png"
    - "!**/*.jpg"
    - "!**/*.gif"

custom:
  allowedOrigins:                     # CORS – ajuste si tu as un domaine spécifique
    - "*"
  prune:
    automatic: true
    number: 3

plugins:
  - serverless-prune-plugin

functions:
  # ---- /health --------------------------------------------------------------
  health:
    handler: handler.health
    memorySize: 256
    timeout: 5
    package:
      patterns:
        - handler.py
    events:
      - http:
          path: health
          method: get
          cors: true                 # CORS simple pour un GET

  # ---- /predict -------------------------------------------------------------
  predict:
    handler: handler.predict
    memorySize: 1024
    timeout: 20
    package:
      patterns:
        - handler.py
        - "schemas/**"               # pour la validation du corps
        - "*.pkl"                    # si tu embarques un modèle .pkl à la racine
        - "model/**"                 # ou un dossier model/
    events:
      - http:
          path: predict
          method: post
          cors:
            origins: ${self:custom.allowedOrigins}
            headers:
              - Content-Type
            allowCredentials: false
          request:
            schemas:                 # REST = 'schemas' (pluriel)
              application/json:
                name: PredictRequest
                schema: ${file(schemas/predict.json)}
                # Le schéma attendu : { "features": [ <30 nombres> ] }

# ---- Sorties CloudFormation utiles -----------------------------------------
resources:
  Outputs:
    ServiceEndpoint:
      Description: REST API base URL
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api."
            - Ref: AWS::Region
            - ".amazonaws.com/"
            - ${sls:stage}

    HealthUrl:
      Description: Healthcheck URL
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api."
            - Ref: AWS::Region
            - ".amazonaws.com/"
            - ${sls:stage}
            - "/health"

    PredictUrl:
      Description: Predict URL
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api."
            - Ref: AWS::Region
            - ".amazonaws.com/"
            - ${sls:stage}
            - "/predict"

# ci: trigger 2025-09-04T23:09:15Z
